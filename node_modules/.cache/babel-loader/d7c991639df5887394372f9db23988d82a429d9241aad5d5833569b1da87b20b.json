{"ast":null,"code":"// AI服务 - 调用大模型API\nclass AIService {\n  constructor() {\n    // API配置\n    this.config = {\n      // Qwen API配置\n      qwen: {\n        apiKey: 'sk-343f061be4279a7841c0f039f876092478972a73ab56a5758d171de2f5758c70',\n        baseURL: 'https://openai.qiniu.com/v1',\n        model: 'qwen-turbo'\n      },\n      // Deepseek API配置\n      deepseek: {\n        apiKey: 'sk-506172768043496013ecea795c077e637146ea032e12e32938175ef6fdd14a92',\n        baseURL: 'https://openai.qiniu.com/v1',\n        model: 'deepseek-r1'\n      },\n      // Doubao API配置\n      doubao: {\n        apiKey: 'sk-1e786ad149f436ddd7b1f65698eee4e375642616344ca17be19838b6bbfca3be',\n        baseURL: 'https://openai.qiniu.com/v1',\n        model: 'doubao-1.5-thinking-pro'\n      }\n    };\n\n    // 当前使用的API提供商\n    this.currentProvider = 'qwen'; // 可选: 'qwen', 'deepseek', 'doubao'\n  }\n\n  // 构建角色提示词\n  buildCharacterPrompt(character, userMessage, conversationHistory = []) {\n    const systemPrompt = `你是${character.name}，${character.description}。\n\n性格特点：${character.personality}\n技能特长：${character.skills.join('、')}\n背景介绍：${character.background}\n\n请严格按照以下要求进行角色扮演：\n1. 完全沉浸在角色中，以第一人称\"我\"来回答\n2. 保持角色的性格特点和说话风格\n3. 运用角色的技能和知识背景\n4. 回答要生动有趣，符合角色设定\n5. 适当使用角色的专业术语和表达方式\n6. 保持对话的自然流畅，不要过于生硬\n\n请用中文回答，回答长度控制在100-200字之间。`;\n    const messages = [{\n      role: 'system',\n      content: systemPrompt\n    }, ...conversationHistory.slice(-6),\n    // 保留最近6轮对话作为上下文\n    {\n      role: 'user',\n      content: userMessage\n    }];\n    return messages;\n  }\n\n  // 调用Qwen API\n  async callQwen(messages) {\n    const config = this.config.qwen;\n    const response = await fetch(`${config.baseURL}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${config.apiKey}`\n      },\n      body: JSON.stringify({\n        model: config.model,\n        messages: messages,\n        max_tokens: 300,\n        temperature: 0.8,\n        top_p: 0.9,\n        frequency_penalty: 0.5,\n        presence_penalty: 0.3\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Qwen API错误: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  // 调用Deepseek API\n  async callDeepseek(messages) {\n    const config = this.config.deepseek;\n\n    // 将消息格式转换为Deepseek格式\n    const systemMessage = messages.find(msg => msg.role === 'system');\n    const conversationMessages = messages.filter(msg => msg.role !== 'system');\n    const response = await fetch(`${config.baseURL}/messages`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': config.apiKey,\n        'anthropic-version': '2023-06-01'\n      },\n      body: JSON.stringify({\n        model: config.model,\n        max_tokens: 300,\n        system: (systemMessage === null || systemMessage === void 0 ? void 0 : systemMessage.content) || '',\n        messages: conversationMessages\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Deepseek API错误: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.content[0].text;\n  }\n\n  // 调用豆包 API\n  async callDoubao(messages) {\n    const config = this.config.doubao;\n    const response = await fetch(`${config.baseURL}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${config.apiKey}`\n      },\n      body: JSON.stringify({\n        model: config.model,\n        messages: messages,\n        max_tokens: 300,\n        temperature: 0.8,\n        top_p: 0.9\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`智谱AI API错误: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content;\n  }\n\n  // 主要调用方法\n  async generateResponse(character, userMessage, conversationHistory = []) {\n    try {\n      const messages = this.buildCharacterPrompt(character, userMessage, conversationHistory);\n      let response;\n      switch (this.currentProvider) {\n        case 'qwen':\n          response = await this.callQwen(messages);\n          break;\n        case 'deepseek':\n          response = await this.callDeepseek(messages);\n          break;\n        case 'doubao':\n          response = await this.callDoubao(messages);\n          break;\n        default:\n          throw new Error(`不支持的API提供商: ${this.currentProvider}`);\n      }\n      return response.trim();\n    } catch (error) {\n      console.error('AI服务错误:', error);\n\n      // 返回备用回复\n      return this.getFallbackResponse(character, userMessage);\n    }\n  }\n\n  // 备用回复（当API调用失败时）\n  getFallbackResponse(character, userMessage) {\n    const fallbackResponses = {\n      '哈利·波特': ['这让我想起了在霍格沃茨的时光...', '你知道吗，我在一年级时就学会了魁地奇！', '友谊和勇气是最重要的魔法。', '有时候，我们需要相信自己的直觉。'],\n      '苏格拉底': ['让我问你一个问题：什么是真正的智慧？', '无知之知，这是智慧的开始。', '通过对话，我们可以发现真理。', '你认为什么是正义？'],\n      '夏洛克·福尔摩斯': ['从你的话语中，我观察到了一些有趣的细节...', '让我运用演绎法来分析这个问题。', '数据！数据！数据！没有数据就无法推理。', '排除所有不可能的情况，剩下的就是真相。'],\n      '达芬奇': ['这让我想到了一个新的发明想法...', '艺术和科学是相通的，都需要观察和创造。', '好奇心是知识的源泉。', '让我画个图来解释这个概念。']\n    };\n    const responses = fallbackResponses[character.name] || ['这是一个很有趣的话题。'];\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  // 设置API提供商\n  setProvider(provider) {\n    if (['qwen', 'deepseek', 'doubao'].includes(provider)) {\n      this.currentProvider = provider;\n    } else {\n      throw new Error('不支持的API提供商');\n    }\n  }\n\n  // 获取当前配置\n  getConfig() {\n    return {\n      currentProvider: this.currentProvider,\n      availableProviders: ['qwen', 'deepseek', 'doubao']\n    };\n  }\n}\n\n// 创建单例实例\nconst aiService = new AIService();\nexport default aiService;","map":{"version":3,"names":["AIService","constructor","config","qwen","apiKey","baseURL","model","deepseek","doubao","currentProvider","buildCharacterPrompt","character","userMessage","conversationHistory","systemPrompt","name","description","personality","skills","join","background","messages","role","content","slice","callQwen","response","fetch","method","headers","body","JSON","stringify","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","ok","Error","status","statusText","data","json","choices","message","callDeepseek","systemMessage","find","msg","conversationMessages","filter","system","text","callDoubao","generateResponse","trim","error","console","getFallbackResponse","fallbackResponses","responses","Math","floor","random","length","setProvider","provider","includes","getConfig","availableProviders","aiService"],"sources":["C:/Users/YY/Desktop/cosplay/src/services/aiService.js"],"sourcesContent":["// AI服务 - 调用大模型API\r\nclass AIService {\r\n  constructor() {\r\n    // API配置\r\n    this.config = {\r\n      // Qwen API配置\r\n      qwen: {\r\n        apiKey: 'sk-343f061be4279a7841c0f039f876092478972a73ab56a5758d171de2f5758c70',\r\n        baseURL: 'https://openai.qiniu.com/v1',\r\n        model: 'qwen-turbo'\r\n      },\r\n      // Deepseek API配置\r\n      deepseek: {\r\n        apiKey: 'sk-506172768043496013ecea795c077e637146ea032e12e32938175ef6fdd14a92',\r\n        baseURL: 'https://openai.qiniu.com/v1',\r\n        model: 'deepseek-r1'\r\n      },\r\n      // Doubao API配置\r\n      doubao: {\r\n        apiKey: 'sk-1e786ad149f436ddd7b1f65698eee4e375642616344ca17be19838b6bbfca3be',\r\n        baseURL: 'https://openai.qiniu.com/v1',\r\n        model: 'doubao-1.5-thinking-pro'\r\n      }\r\n    };\r\n    \r\n    // 当前使用的API提供商\r\n    this.currentProvider = 'qwen'; // 可选: 'qwen', 'deepseek', 'doubao'\r\n  }\r\n\r\n  // 构建角色提示词\r\n  buildCharacterPrompt(character, userMessage, conversationHistory = []) {\r\n    const systemPrompt = `你是${character.name}，${character.description}。\r\n\r\n性格特点：${character.personality}\r\n技能特长：${character.skills.join('、')}\r\n背景介绍：${character.background}\r\n\r\n请严格按照以下要求进行角色扮演：\r\n1. 完全沉浸在角色中，以第一人称\"我\"来回答\r\n2. 保持角色的性格特点和说话风格\r\n3. 运用角色的技能和知识背景\r\n4. 回答要生动有趣，符合角色设定\r\n5. 适当使用角色的专业术语和表达方式\r\n6. 保持对话的自然流畅，不要过于生硬\r\n\r\n请用中文回答，回答长度控制在100-200字之间。`;\r\n\r\n    const messages = [\r\n      { role: 'system', content: systemPrompt },\r\n      ...conversationHistory.slice(-6), // 保留最近6轮对话作为上下文\r\n      { role: 'user', content: userMessage }\r\n    ];\r\n\r\n    return messages;\r\n  }\r\n\r\n  // 调用Qwen API\r\n  async callQwen(messages) {\r\n    const config = this.config.qwen;\r\n    \r\n    const response = await fetch(`${config.baseURL}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: config.model,\r\n        messages: messages,\r\n        max_tokens: 300,\r\n        temperature: 0.8,\r\n        top_p: 0.9,\r\n        frequency_penalty: 0.5,\r\n        presence_penalty: 0.3\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Qwen API错误: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n  }\r\n\r\n  // 调用Deepseek API\r\n  async callDeepseek(messages) {\r\n    const config = this.config.deepseek;\r\n    \r\n    // 将消息格式转换为Deepseek格式\r\n    const systemMessage = messages.find(msg => msg.role === 'system');\r\n    const conversationMessages = messages.filter(msg => msg.role !== 'system');\r\n    \r\n    const response = await fetch(`${config.baseURL}/messages`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': config.apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: config.model,\r\n        max_tokens: 300,\r\n        system: systemMessage?.content || '',\r\n        messages: conversationMessages\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Deepseek API错误: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.content[0].text;\r\n  }\r\n\r\n  // 调用豆包 API\r\n  async callDoubao(messages) {\r\n    const config = this.config.doubao;\r\n    \r\n    const response = await fetch(`${config.baseURL}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: config.model,\r\n        messages: messages,\r\n        max_tokens: 300,\r\n        temperature: 0.8,\r\n        top_p: 0.9\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`智谱AI API错误: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].message.content;\r\n  }\r\n\r\n  // 主要调用方法\r\n  async generateResponse(character, userMessage, conversationHistory = []) {\r\n    try {\r\n      const messages = this.buildCharacterPrompt(character, userMessage, conversationHistory);\r\n      \r\n      let response;\r\n      switch (this.currentProvider) {\r\n        case 'qwen':\r\n          response = await this.callQwen(messages);\r\n          break;\r\n        case 'deepseek':\r\n          response = await this.callDeepseek(messages);\r\n          break;\r\n        case 'doubao':\r\n          response = await this.callDoubao(messages);\r\n          break;\r\n        default:\r\n          throw new Error(`不支持的API提供商: ${this.currentProvider}`);\r\n      }\r\n\r\n      return response.trim();\r\n    } catch (error) {\r\n      console.error('AI服务错误:', error);\r\n      \r\n      // 返回备用回复\r\n      return this.getFallbackResponse(character, userMessage);\r\n    }\r\n  }\r\n\r\n  // 备用回复（当API调用失败时）\r\n  getFallbackResponse(character, userMessage) {\r\n    const fallbackResponses = {\r\n      '哈利·波特': [\r\n        '这让我想起了在霍格沃茨的时光...',\r\n        '你知道吗，我在一年级时就学会了魁地奇！',\r\n        '友谊和勇气是最重要的魔法。',\r\n        '有时候，我们需要相信自己的直觉。'\r\n      ],\r\n      '苏格拉底': [\r\n        '让我问你一个问题：什么是真正的智慧？',\r\n        '无知之知，这是智慧的开始。',\r\n        '通过对话，我们可以发现真理。',\r\n        '你认为什么是正义？'\r\n      ],\r\n      '夏洛克·福尔摩斯': [\r\n        '从你的话语中，我观察到了一些有趣的细节...',\r\n        '让我运用演绎法来分析这个问题。',\r\n        '数据！数据！数据！没有数据就无法推理。',\r\n        '排除所有不可能的情况，剩下的就是真相。'\r\n      ],\r\n      '达芬奇': [\r\n        '这让我想到了一个新的发明想法...',\r\n        '艺术和科学是相通的，都需要观察和创造。',\r\n        '好奇心是知识的源泉。',\r\n        '让我画个图来解释这个概念。'\r\n      ]\r\n    };\r\n\r\n    const responses = fallbackResponses[character.name] || ['这是一个很有趣的话题。'];\r\n    return responses[Math.floor(Math.random() * responses.length)];\r\n  }\r\n\r\n  // 设置API提供商\r\n  setProvider(provider) {\r\n    if (['qwen', 'deepseek', 'doubao'].includes(provider)) {\r\n      this.currentProvider = provider;\r\n    } else {\r\n      throw new Error('不支持的API提供商');\r\n    }\r\n  }\r\n\r\n  // 获取当前配置\r\n  getConfig() {\r\n    return {\r\n      currentProvider: this.currentProvider,\r\n      availableProviders: ['qwen', 'deepseek', 'doubao']\r\n    };\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst aiService = new AIService();\r\n\r\nexport default aiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}